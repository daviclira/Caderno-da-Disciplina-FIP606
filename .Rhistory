labs(
title = "Distribuição por Local",
subtitle = paste("Teste Kruskal-Wallis, p =", format.pval(mode$p.value, digits = 3)),
x = "Local",
y = "Número de Insetos"
) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.2))) +
scale_fill_viridis_d(option = "D", begin = 0.2, end = 0.8)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
# Teste de Dunn é o post-hoc utilizado para modelos de Kruskal-Wallis
dunn_e <- dunn_test(num ~ local, data = datae, p.adjust.method = "bonferroni")
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
# Teste de Dunn é o post-hoc utilizado para modelos de Kruskal-Wallis
dunn_e <- dunn_test(num ~ local, data = datae, p.adjust.method = "bonferroni")
if(!require(multcompView)) install.packages("multcompView")
library(multcompView)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
# Criar matriz de comparações para o multcompView
p_values <- setNames(dunn_e$p.adj,
paste(dunn_e$group1, dunn_e$group2, sep = "-"))
# Obter letras de significância
letter_info <- multcompLetters(p_values)
# Preparar dados para o gráfico
letras_plot <- data.frame(
local = names(letter_info$Letters),
letra = letter_info$Letters,
y_pos = max(datae$num) * 1.1
)
# Definir a ordem desejada das variáveis no eixo x
ordem_desejada <- c("neg_1", "neg_05", "0", "0,5", "1")  # Padronizando para ponto decimal
# Converter a variável 'local' em fator com a ordem correta
datae <- datae %>%
mutate(local = factor(
local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = c("-1", "-0.5", "0", "0.5", "1")
))
# Atualizar também o dataframe letras_plot
if(exists("letras_plot")) {
letras_plot <- letras_plot %>%
mutate(local = factor(
local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = c("-1", "-0.5", "0", "0.5", "1")
))
}
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
ggplot(datae, aes(x = local, y = num)) +
geom_boxplot(aes(fill = local), width = 0.6, show.legend = FALSE) +
geom_text(data = letras_plot,
aes(x = local, y = y_pos, label = letra),
size = 6, vjust = 0) +
labs(
title = "Distribuição por Local",
subtitle = paste("Teste Kruskal-Wallis, p =", format.pval(mode$p.value, digits = 3)),
x = "Local",
y = "Número de Insetos"
) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.2))) +
scale_fill_viridis_d(option = "D", begin = 0.2, end = 0.8)
# Teste de Dunn é o post-hoc utilizado para modelos de Kruskal-Wallis
dunn_g <- dunn_test(num ~ local, data = datag, p.adjust.method = "bonferroni")
if(!require(multcompView)) install.packages("multcompView")
library(multcompView)
# Criar matriz de comparações para o multcompView
p_g <- setNames(dunn_nt$p.adj,
paste(dunn_g$group1, dunn_g$group2, sep = "-"))
# Obter letras de significância
letter_g <- multcompLetters(p_g)
# Preparar dados para o gráfico
letras_plot_g <- data.frame(
local = names(letter_g$Letters),
letra = letter_g$Letters,
y_pos = max(datag$num) * 1.1)
ordem_desejada <- c("neg_1", "neg_05", "0", "0,5", "1")
# Converter a variável 'local' em fator com a ordem correta
datag <- datag %>%
mutate(local = factor(local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = ordem_desejada))
# Atualizar também o dataframe letras_plot
if(exists("letras_plot_g")) {
letras_plot_g <- letras_plot_g %>%
mutate(local = factor(local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = ordem_desejada))
}
# Modificar os níveis do fator nos dados
datag <- datag %>%
mutate(local = factor(local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = c("-1", "-0.5", "0", "0.5", "1")))
# Atualizar o dataframe letras_plot
letras_plot_g <- letras_plot_g %>%
mutate(local = factor(local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = c("-1", "-0.5", "0", "0.5", "1")))
ggplot(datag, aes(x = local, y = num)) +
geom_boxplot(aes(fill = local), width = 0.6, show.legend = FALSE) +
geom_text(data = letras_plot_g,
aes(x = local, y = y_pos, label = letra),
size = 6, vjust = 0) +
labs(
title = "Distribuição por Local",
subtitle = paste("Teste Kruskal-Wallis, p =", format.pval(mode$p.value, digits = 3)),
x = "Local",
y = "Número de Insetos"
) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.2))) +
scale_fill_viridis_d(option = "D", begin = 0.2, end = 0.8)
# Teste de Dunn é o post-hoc utilizado para modelos de Kruskal-Wallis
dunn_c <- dunn_test(num ~ local, data = datac, p.adjust.method = "bonferroni")
# Criar matriz de comparações para o multcompView
p_c <- setNames(dunn_c$p.adj,
paste(dunn_c$group1, dunn_c$group2, sep = "-"))
# Obter letras de significância
letter_c <- multcompLetters(p_c)
# Preparar dados para o gráfico
letras_plot_c <- data.frame(
local = names(letter_c$Letters),
letra = letter_c$Letters,
y_pos = max(datac$num) * 1.1)
ordem_desejada <- c("neg_1", "neg_05", "0", "0,5", "1")
# Converter a variável 'local' em fator com a ordem correta
datac <- datac %>%
mutate(local = factor(local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = ordem_desejada))
# Atualizar também o dataframe letras_plot
if(exists("letras_plot_c")) {
letras_plot_c <- letras_plot_c %>%
mutate(local = factor(local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = ordem_desejada))
}
# Modificar os níveis do fator nos dados
datac <- datac %>%
mutate(local = factor(local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = c("-1", "-0.5", "0", "0.5", "1")))
# Atualizar o dataframe letras_plot
letras_plot_c <- letras_plot_c %>%
mutate(local = factor(local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = c("-1", "-0.5", "0", "0.5", "1")))
ggplot(datac, aes(x = local, y = num)) +
geom_boxplot(aes(fill = local), width = 0.6, show.legend = FALSE) +
geom_text(data = letras_plot_c,
aes(x = local, y = y_pos, label = letra),
size = 6, vjust = 0) +
labs(
title = "Distribuição por Local",
subtitle = paste("Teste Kruskal-Wallis, p =", format.pval(mode$p.value, digits = 3)),
x = "Local",
y = "Número de Insetos"
) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.2))) +
scale_fill_viridis_d(option = "D", begin = 0.2, end = 0.8)
# Teste de Dunn é o post-hoc utilizado para modelos de Kruskal-Wallis
dunn_t <- dunn_test(num ~ local, data = datat, p.adjust.method = "bonferroni")
# Criar matriz de comparações para o multcompView
p_t <- setNames(dunn_t$p.adj,
paste(dunn_t$group1, dunn_t$group2, sep = "-"))
# Obter letras de significância
letter_t <- multcompLetters(p_t)
# Preparar dados para o gráfico
letras_plot_t <- data.frame(
local = names(letter_t$Letters),
letra = letter_t$Letters,
y_pos = max(datat$num) * 1.1)
ordem_desejada <- c("neg_1", "neg_05", "0", "0,5", "1")
# Converter a variável 'local' em fator com a ordem correta
datat <- datat %>%
mutate(local = factor(local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = ordem_desejada))
# Atualizar também o dataframe letras_plot
if(exists("letras_plot_c")) {
letras_plot_t <- letras_plot_t %>%
mutate(local = factor(local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = ordem_desejada))
}
# Modificar os níveis do fator nos dados
datat <- datat %>%
mutate(local = factor(local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = c("-1", "-0.5", "0", "0.5", "1")))
# Atualizar o dataframe letras_plot
letras_plot_t <- letras_plot_t %>%
mutate(local = factor(local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = c("-1", "-0.5", "0", "0.5", "1")))
ggplot(datat, aes(x = local, y = num)) +
geom_boxplot(aes(fill = local), width = 0.6, show.legend = FALSE) +
geom_text(data = letras_plot_t,
aes(x = local, y = y_pos, label = letra),
size = 6, vjust = 0) +
labs(
title = "Distribuição por Local",
subtitle = paste("Teste Kruskal-Wallis, p =", format.pval(mode$p.value, digits = 3)),
x = "Local",
y = "Número de Insetos"
) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.2))) +
scale_fill_viridis_d(option = "D", begin = 0.2, end = 0.8)
if(!require(multcompView)) install.packages("multcompView")
library(multcompView)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
# Criar matriz de comparações para o multcompView
p_values <- setNames(dunn_e$p.adj,
paste(dunn_e$group1, dunn_e$group2, sep = "-"))
# Obter letras de significância
letter_info <- multcompLetters(p_values)
# Preparar dados para o gráfico
letras_plot <- data.frame(
local = names(letter_info$Letters),
letra = letter_info$Letters,
y_pos = max(datae$num) * 1.1
)
# Definir a ordem desejada das variáveis no eixo x
ordem_desejada <- c("neg_1", "neg_05", "0", "0,5", "1")  # Padronizando para ponto decimal
# Converter a variável 'local' em fator com a ordem correta
datae <- datae %>%
mutate(local = factor(
local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = c("-1", "-0.5", "0", "0.5", "1")
))
# Atualizar também o dataframe letras_plot
if(exists("letras_plot")) {
letras_plot <- letras_plot %>%
mutate(local = factor(
local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = c("-1", "-0.5", "0", "0.5", "1")
))
}
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
ggplot(datae, aes(x = local, y = num)) +
geom_boxplot(aes(fill = local), width = 0.6, show.legend = FALSE) +
geom_text(data = letras_plot,
aes(x = local, y = y_pos, label = letra),
size = 6, vjust = 0) +
labs(
title = "Distribuição por Local",
subtitle = paste("Teste Kruskal-Wallis, p =", format.pval(mode$p.value, digits = 3)),
x = "Local",
y = "Número de Insetos"
) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.2))) +
scale_fill_viridis_d(option = "D", begin = 0.2, end = 0.8)
if(!require(multcompView)) install.packages("multcompView")
library(multcompView)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
# Criar matriz de comparações para o multcompView
p_values <- setNames(dunn_e$p.adj,
paste(dunn_e$group1, dunn_e$group2, sep = "-"))
# Obter letras de significância
letter_info <- multcompLetters(p_values)
# Preparar dados para o gráfico
letras_plot_e <- data.frame(
local = names(letter_info$Letters),
letra = letter_info$Letters,
y_pos = max(datae$num) * 1.1
)
# Definir a ordem desejada das variáveis no eixo x
ordem_desejada <- c("neg_1", "neg_05", "0", "0,5", "1")  # Padronizando para ponto decimal
# Converter a variável 'local' em fator com a ordem correta
datae <- datae %>%
mutate(local = factor(
local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = c("-1", "-0.5", "0", "0.5", "1")
))
# Atualizar também o dataframe letras_plot
if(exists("letras_plot_e")) {
letras_plot_e <- letras_plot_e %>%
mutate(local = factor(
local,
levels = c("neg_1", "neg_05", "0", "0,5", "1"),
labels = c("-1", "-0.5", "0", "0.5", "1")
))
}
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
ggplot(datae, aes(x = local, y = num)) +
geom_boxplot(aes(fill = local), width = 0.6, show.legend = FALSE) +
geom_text(data = letras_plot_e,
aes(x = local, y = y_pos, label = letra),
size = 6, vjust = 0) +
labs(
title = "Distribuição por Local",
subtitle = paste("Teste Kruskal-Wallis, p =", format.pval(mode$p.value, digits = 3)),
x = "Local",
y = "Número de Insetos"
) +
theme_minimal(base_size = 14) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.2))) +
scale_fill_viridis_d(option = "D", begin = 0.2, end = 0.8)
arenas <- read.csv("arenas_fip606.csv", header = T, stringsAsFactors = T)
# Analisar as variáveis do modelo
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
glimpse(arenas)
# Ajustar variáveis no dataframe para facilitar análises futuras
arenas$local <- as.character(arenas$local)
arenas$local <- ifelse(arenas$local == -1, "neg_1", arenas$local)
arenas$local <- ifelse(arenas$local == "-0,5", "neg_05", arenas$local)
install.packages("usethis")
library(usethis)
usethis::use_git()
usethis::git_default_branch_rename(from = "master", to "main")
usethis::git_default_branch_rename(from = "master", to = "main")
usethis::use_git_config(init.defaultBranch = "main")
usethis::use_github()
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
countries <- read.csv("countries.csv")
if(!require(readxl)) install.packages("readxl")
library(readxl)
diversos <- read_excel("dados-diversos.xlsx")
# Selecionar uma tabela dentro do arquivo .xlsx
diversos2 <- read_excel("dados-diversos.xlsx",
sheet = "sensibilidade_fungicidas")
if(!require(gsheet)) install.packages("gsheet")
library(gsheet)
dados_nuvem <- gsheet2tbl("docs.google.com/spreadsheets/u/1/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?usp=sharing&ouid=114387405594168347966&rtpof=true&sd=true")
# Podemos selecionar um sheet específico utilizando sua url
survey <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1118819738#gid=1118819738")
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
diversos <- read_excel("dados-diversos.xlsx")
glimpse(diversos)
diversos$Assess <- as.character(diversos$Assess)
glimpse(diversos)
# Ao utilizar o "$", podemos selecionar uma coluna específica do dataframe
diversos$Assess <- as.integer(diversos$Assess)
glimpse(diversos)
diversos$Assess <- as.factor(diversos$Assess)
glimpse(diversos)
diversos$Assess <- as.logical(diversos$Assess)
glimpse(diversos)
diversos$Assess <- as.double(diversos$Assess)
glimpse(diversos)
# Banco de dados utilizado a seguir
survey <- read_excel("dados-diversos.xlsx",
sheet = "survey")
survey |>
group_by(residue) |>
count()
survey |>
group_by(state, residue) |>
count()
RS <- survey |>
filter(state == "RS")
RS
PR <- survey |>
filter(state == "PR")
PR
combinado <- rbind(RS, PR)
survey_b <- survey |>
select(year, state, species)
survey_b
# usando select e filter juntos
survey_b <- survey |>
select(year, state, species) |>
filter(year == "2009")
survey_b
# "filter" = linha, "select" = coluna
if(!require(janitor)) install.packages("janitor")
library(janitor)
survey_b |>
tabyl(state, species)
survey_b |>
tabyl(year, species)
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
survey_b |>
group_by(year, species) |>
count() |>
ggplot(aes(species, n, fill = species)) +
geom_col() +
facet_wrap(~year)
survey_b |>
group_by(year, species) |>
count() |>
ggplot(aes(year, n, fill = species)) +
geom_bar(stat = "identity")
survey_b |>
group_by(year, species) |>
count() |>
ggplot(aes(year, n, fill = species)) +
geom_col() +
scale_fill_manual(values = c("red", "blue"))
### scale_fill pode servir para mudanças manuais ou com base em paletas do R
### fill = preenchimento
### color = borda ou preenchimento
if(!require(tidyr)) install.packages("tidyr")
library(tidyr)
mg<- read_excel("dados-diversos.xlsx",
sheet = "magnesio")
mg2 <- mg |>
pivot_wider(names_from = trat, values_from = comp) |>
select(-rep)
glimpse(mg2)
mg2
if(!require(readxl)) install.packages("readxl")
library(readxl)
micelial <- read_excel("dados-diversos.xlsx",
sheet = "micelial")
anova <- aov(tcm ~ especie, data = micelial)
TukeyHSD(anova)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(datasets)) install.packages("datasets")
library(datasets)
insect <- InsectSprays
kuskal <- kruskal.test(count ~ spray, data = insect)
dunn_e <- dunn_test(count ~ spray, data = insect, p.adjust.method = "bonferroni")
dunn_e
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
escala <- read_excel("dados-diversos.xlsx",
sheet = "escala")
unaided <- escala |>
filter(assessment == "Unaided") |>
select(acuracia) |>
pull()
aided <- escala |>
filter(assessment == "Aided1") |>
select(acuracia) |>
pull()
pairwise.wilcox.test(unaided, aided, p.adjust.method = "holm")
if(!require(readxl)) install.packages("readxl")
library(readxl)
if(!require(tidyr)) install.packages("tidyr")
library(tidyr)
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
mg<- read_excel("dados-diversos.xlsx",
sheet = "magnesio")
mg2 <- mg |>
pivot_wider(names_from = trat, values_from = comp) |>
select(-rep)
tmg2 <- t.test(mg2$Mg2, mg2$control)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
escala <- read_excel("dados-diversos.xlsx",
sheet = "escala")
t_test(acuracia ~ assessment,
data = escala,
paired = T)
diversos <- read_excel("dados-diversos.xlsx")
teste_t <- t.test(diversos$ImageJ, mu = 500)
print(teste_t)
fungcamp<- read_excel("dados-diversos.xlsx",
sheet = "fungicida_campo")
linearmodel <- lm(PROD ~ FER, data = fungcamp)
summary(linearmodel)
# Identificar o valor dos coeficientes beta-0 e beta-1
print(linearmodel)
micelial <- read_excel("dados-diversos.xlsx",
sheet = "micelial")
anova <- aov(tcm ~ especie, data = micelial)
summary(anova)
print(anova)
curve <- read_excel("dados-diversos.xlsx",
sheet = "curve")
ancova <- aov(severity ~ Irrigation + day + Irrigation*day, data = curve)
summary(ancova)
# Quando a interação não for significativa, deve-se retirá-la do modelo e roda-lo novamente.
ancova <- aov(severity ~ Irrigation + day, data = curve)
summary(ancova)
sensi <- read_excel("dados-diversos.xlsx",
sheet = "sensibilidade_fungicidas")
modsensi <- aov(germination ~ state * dose, data = sensi)
summary(modsensi)
if(!require(datasets)) install.packages("datasets")
library(datasets)
insect <- InsectSprays
kruskal.test(count ~ spray, data = insect)
if(!require(agricolae)) install.packages("agricolae")
library(agricolae)
kruskal(insect$count, insect$spray, group = T, console = T)
escala <- read_excel("dados-diversos.xlsx",
sheet = "escala")
unaided <- escala |>
filter(assessment == "Unaided") |>
select(acuracia) |>
pull()
aided <- escala |>
filter(assessment == "Aided1") |>
select(acuracia) |>
pull()
wilcox.test(unaided, aided)
wilcox.test(unaided, aided, paired = F)
glm <- glm(PROD ~ FER, data = fungcamp)
summary(glm)
