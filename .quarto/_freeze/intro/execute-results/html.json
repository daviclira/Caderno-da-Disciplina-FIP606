{
  "hash": "5f8eaf7d32cd12492e26ae988206bb08",
  "result": {
    "markdown": "# Introdução\n\n## O que é o R?\n\nR é uma linguagem de programação e ambiente de software especializado em computação estatística e gráficos. É uma linguagem de código aberto, voltada principalmente para análise estatística e visualização de dados.\n\n## Para que utilizar o R?\n\n-   Análise de dados experimentais\n\n-   Testes estatísticos\n\n-   Criação de gráficos profissionais\n\n-   Manipulação de dados\n\n## \n\n# Funções básicas do R\n\n## Atribuição\n\nCom a função de atribuição, é possível facilitar o uso de dados, codificando-os com uma string\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndados <- 1 + 1\nprint(dados)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n# A função *print* funciona para colocar na tela a atribuição escolhida\n```\n:::\n\n\n## Baixar e instalar pacotes\n\nPacotes são complementos adicionais que propiciam funções novas ao R.\n\nPara baixar e instalar deve-se utilizar as funções *install.packages* e *library*, da seguinte forma:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(dplyr)) install.packages(\"dplyr\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: dplyr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n:::\n\n\n## Como importar datasets\n\nDatasets são basicamente conjuntos de dados, eles serão a base das análises\n\nHá várias formas de importar datasets, seguem algumas:\n\n### Importar utilizando funções básicas do R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountries <- read.csv(\"countries.csv\")\n```\n:::\n\n\nCom isso conseguimos ler arquivos no formato .csv\n\n### Pacotes para importação de datasets\n\nPacote para importar arquivos em .xlsx\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(readxl)) install.packages(\"readxl\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: readxl\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'readxl' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(readxl)\n\ndiversos <- read_excel(\"dados-diversos.xlsx\")\n\n# Selecionar uma tabela dentro do arquivo .xlsx\n\ndiversos2 <- read_excel(\"dados-diversos.xlsx\",\n                       sheet = \"sensibilidade_fungicidas\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `` -> `...8`\n• `` -> `...9`\n```\n:::\n:::\n\n\nPacote para importar diretamente do Google Sheets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(gsheet)) install.packages(\"gsheet\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: gsheet\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'gsheet' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(gsheet)\n\ndados_nuvem <- gsheet2tbl(\"docs.google.com/spreadsheets/u/1/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?usp=sharing&ouid=114387405594168347966&rtpof=true&sd=true\")\n\n# Podemos selecionar um sheet específico utilizando sua url\nsurvey <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=1118819738#gid=1118819738\")\n```\n:::\n\n\n## Manipulação de dados\n\nApós importar os dados, podemos manipulá-los de diversas formas\n\nO mais básico da manipulação de dados é a função de atribuir, porém temos muitas outras ferramentas para realizarmos essa atividade.\n\n### Tipos de variáveis\n\nAs variáveis de um dataframe são separadas em tipos, o que influencia diretamente nas análises.\n\nOs tipos mais comuns utilizados no R são:\n\n#### a) Numéricas\n\n-   Armazenam números decimais (contínuos)\n\n-   Exemplo: `altura <- 1.75`\n\n#### b) Inteiras\n\n-   Armazenam números inteiros\n\n-   Exemplo: `idade <- 30`\n\n#### c) Caracteres\n\n-   Armazenam texto (strings)\n\n-   Exemplo: `nome <- \"João Silva\"`\n\n#### d) Lógicas\n\n-   Armazenam valores TRUE (verdadeiro) ou FALSE (falso)\n\n-   Exemplo: `ativo <- TRUE`\n\n#### e) Fatores\n\n-   Representam variáveis categóricas (com níveis definidos)\n\n-   Crucial para análises estatísticas\n\n-   Exemplo: `tratamento <- factor(c(\"A\", \"B\", \"A\", \"C\"))`\n\nTodas as variáveis estão englobadas dentro da classificação estatística das variáveis.\n\nOs quatro tipos são:\n\na)  Quantitativas\n\n-   Contínuas: podem assumir qualquer valor num intervalo (ex: peso, altura)\n\n-   Discretas: valores inteiros (ex: número de insetos)\n\nb)  Qualitativas\n\n-   Nominais: categorias sem ordem (ex: cor, sexo)\n\n-   Ordinais: categorias com ordem (ex: nível educacional)\n\n### Outros tipos de variáveis utilizadas no R\n\n### Data Frames\n\n-   Estrutura tabular (como uma planilha)\n\n-   Colunas podem ser de diferentes tipos\n\n-   Exemplo: um objeto `data`com colunas `num` (numeric) e `local` (character)\n\n### Listas\n\n-   Coleção ordenada de objetos de qualquer tipo\n\n-   Exemplo: `minha_lista <- list(nome = \"Ana\", idade = 25, ativo = TRUE)`\n\n### Formas de manipular variáveis\n\nPrimeiramente, deve-se identificar os tipos de variáveis presentes no dataframe\n\nPara isso, utilizaremos a função \\*glimpse\\*, do pacote \"dplyr\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(dplyr)) install.packages(\"dplyr\")\nlibrary(dplyr)\n\ndiversos <- read_excel(\"dados-diversos.xlsx\")\nglimpse(diversos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 70\nColumns: 5\n$ Cultura    <chr> \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Ro…\n$ rep        <dbl> 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,…\n$ Assess     <dbl> 19.95, 4.77, 72.11, 81.37, 25.78, 80.45, 81.69, 7.02, 11.23…\n$ LeafDoctor <dbl> 31.55, 13.53, 77.59, 90.83, 24.54, 73.84, 86.78, 14.04, 16.…\n$ ImageJ     <dbl> 26.04, 5.16, 69.46, 82.68, 13.13, 69.90, 88.66, 6.40, 10.82…\n```\n:::\n:::\n\n\nCom os tipos de variáveis descritos, podemos modifica-los como bem entendermos\n\n#### Tranformar variáveis\n\nPodemos transformar as variáveis de um dataframe no tipo que quisermos, com funções básicas do R\n\nTransformação em variáveis de caracteres\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiversos$Assess <- as.character(diversos$Assess)\nglimpse(diversos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 70\nColumns: 5\n$ Cultura    <chr> \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Ro…\n$ rep        <dbl> 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,…\n$ Assess     <chr> \"19.95\", \"4.77\", \"72.11\", \"81.37\", \"25.78\", \"80.45\", \"81.69…\n$ LeafDoctor <dbl> 31.55, 13.53, 77.59, 90.83, 24.54, 73.84, 86.78, 14.04, 16.…\n$ ImageJ     <dbl> 26.04, 5.16, 69.46, 82.68, 13.13, 69.90, 88.66, 6.40, 10.82…\n```\n:::\n\n```{.r .cell-code}\n# Ao utilizar o \"$\", podemos selecionar uma coluna específica do dataframe\n```\n:::\n\n\nTransformação em variáveis de numéricas inteiras\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiversos$Assess <- as.integer(diversos$Assess)\nglimpse(diversos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 70\nColumns: 5\n$ Cultura    <chr> \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Ro…\n$ rep        <dbl> 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,…\n$ Assess     <int> 19, 4, 72, 81, 25, 80, 81, 7, 11, 79, 34, 12, 65, 41, 84, 4…\n$ LeafDoctor <dbl> 31.55, 13.53, 77.59, 90.83, 24.54, 73.84, 86.78, 14.04, 16.…\n$ ImageJ     <dbl> 26.04, 5.16, 69.46, 82.68, 13.13, 69.90, 88.66, 6.40, 10.82…\n```\n:::\n:::\n\n\nTransformação em variáveis de fator\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiversos$Assess <- as.factor(diversos$Assess)\nglimpse(diversos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 70\nColumns: 5\n$ Cultura    <chr> \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Ro…\n$ rep        <dbl> 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,…\n$ Assess     <fct> 19, 4, 72, 81, 25, 80, 81, 7, 11, 79, 34, 12, 65, 41, 84, 4…\n$ LeafDoctor <dbl> 31.55, 13.53, 77.59, 90.83, 24.54, 73.84, 86.78, 14.04, 16.…\n$ ImageJ     <dbl> 26.04, 5.16, 69.46, 82.68, 13.13, 69.90, 88.66, 6.40, 10.82…\n```\n:::\n:::\n\n\nTransformação em variáveis lógicas\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiversos$Assess <- as.logical(diversos$Assess)\nglimpse(diversos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 70\nColumns: 5\n$ Cultura    <chr> \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Ro…\n$ rep        <dbl> 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,…\n$ Assess     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ LeafDoctor <dbl> 31.55, 13.53, 77.59, 90.83, 24.54, 73.84, 86.78, 14.04, 16.…\n$ ImageJ     <dbl> 26.04, 5.16, 69.46, 82.68, 13.13, 69.90, 88.66, 6.40, 10.82…\n```\n:::\n:::\n\n\nTransformação em variáveis de numéricas com decimais\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiversos$Assess <- as.double(diversos$Assess)\nglimpse(diversos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 70\nColumns: 5\n$ Cultura    <chr> \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Rosa\", \"Ro…\n$ rep        <dbl> 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,…\n$ Assess     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ LeafDoctor <dbl> 31.55, 13.53, 77.59, 90.83, 24.54, 73.84, 86.78, 14.04, 16.…\n$ ImageJ     <dbl> 26.04, 5.16, 69.46, 82.68, 13.13, 69.90, 88.66, 6.40, 10.82…\n```\n:::\n:::\n\n\n### Selecionar partes de dataframes\n\nPara facilitar as análises, ou levar o estudo para um caminho alternativo, podemos selecionar partes de dataframes\n\n#### Selecionar fator de dataframe\n\n::: callout-note\n##### O que é um \"pipe\"?\n\nO pipe, representado pelo operador \\|\\> (ou %\\>%, em pacotes como o tidyverse), é um operador especial no R que permite encadear operações de forma mais legível e intuitiva.\n\nO pipe pega o resultado da expressão à esquerda e usa como primeiro argumento da função à direita. Isso permite que o fluxo de trabalho seja mais dinâmico e prático.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Banco de dados utilizado a seguir\n\nsurvey <- read_excel(\"dados-diversos.xlsx\",\n                       sheet = \"survey\")\n\nsurvey |> \n  group_by(residue) |> \n  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n# Groups:   residue [3]\n  residue     n\n  <chr>   <int>\n1 corn      169\n2 soybean   281\n3 <NA>      216\n```\n:::\n:::\n\n\n#### Selecionando fatores em conjunto\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey |> \n  group_by(state, residue) |> \n  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n# Groups:   state, residue [3]\n  state residue     n\n  <chr> <chr>   <int>\n1 PR    <NA>      216\n2 RS    corn      169\n3 RS    soybean   281\n```\n:::\n:::\n\n\n#### Filtrar dados por fatores\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRS <- survey |> \n  filter(state == \"RS\")\n\nRS\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 450 × 6\n    year state residue   inc inc_class species\n   <dbl> <chr> <chr>   <dbl> <chr>     <chr>  \n 1  2011 RS    soybean     1 low       Fgra   \n 2  2011 RS    soybean     1 low       Fgra   \n 3  2011 RS    soybean     1 low       Fgra   \n 4  2011 RS    soybean     1 low       Fgra   \n 5  2011 RS    soybean     1 low       Fgra   \n 6  2011 RS    soybean     1 low       Fgra   \n 7  2011 RS    corn        1 low       Fgra   \n 8  2010 RS    soybean     2 low       Fspp   \n 9  2010 RS    corn        2 low       Fgra   \n10  2011 RS    soybean     2 low       Fgra   \n# ℹ 440 more rows\n```\n:::\n\n```{.r .cell-code}\nPR <- survey |> \n  filter(state == \"PR\")\n\nPR\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 216 × 6\n    year state residue   inc inc_class species\n   <dbl> <chr> <chr>   <dbl> <chr>     <chr>  \n 1  2009 PR    <NA>       NA <NA>      Fgra   \n 2  2009 PR    <NA>       NA <NA>      Fgra   \n 3  2009 PR    <NA>       NA <NA>      Fgra   \n 4  2009 PR    <NA>       NA <NA>      Fgra   \n 5  2009 PR    <NA>       NA <NA>      Fgra   \n 6  2009 PR    <NA>       NA <NA>      Fgra   \n 7  2009 PR    <NA>       NA <NA>      Fgra   \n 8  2009 PR    <NA>       NA <NA>      Fgra   \n 9  2009 PR    <NA>       NA <NA>      Fgra   \n10  2009 PR    <NA>       NA <NA>      Fgra   \n# ℹ 206 more rows\n```\n:::\n:::\n\n\n#### Combinando os conjuntos RS e PR\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombinado <- rbind(RS, PR)\n```\n:::\n\n\n#### Selecionar colunas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_b <- survey |> \n  select(year, state, species)\n  \nsurvey_b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 666 × 3\n    year state species\n   <dbl> <chr> <chr>  \n 1  2011 RS    Fgra   \n 2  2011 RS    Fgra   \n 3  2011 RS    Fgra   \n 4  2011 RS    Fgra   \n 5  2011 RS    Fgra   \n 6  2011 RS    Fgra   \n 7  2011 RS    Fgra   \n 8  2010 RS    Fspp   \n 9  2010 RS    Fgra   \n10  2011 RS    Fgra   \n# ℹ 656 more rows\n```\n:::\n:::\n\n\n#### Selecionar colunas e fatores de forma conjunta\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# usando select e filter juntos\n\nsurvey_b <- survey |> \n  select(year, state, species) |> \n  filter(year == \"2009\")\n\nsurvey_b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 265 × 3\n    year state species\n   <dbl> <chr> <chr>  \n 1  2009 RS    Fgra   \n 2  2009 RS    Fgra   \n 3  2009 RS    Fgra   \n 4  2009 RS    Fgra   \n 5  2009 RS    Fgra   \n 6  2009 RS    Fgra   \n 7  2009 RS    Fgra   \n 8  2009 RS    Fgra   \n 9  2009 RS    Fgra   \n10  2009 RS    Fgra   \n# ℹ 255 more rows\n```\n:::\n\n```{.r .cell-code}\n# \"filter\" = linha, \"select\" = coluna\n```\n:::\n\n\n### Criar tabela de contingência\n\nPermite agrupamento em formato largo\n\n::: callout-note\n##### Pacote *janitor*\n\n*Descrição*: Ferramentas para limpeza e preparação de dados.\\\n*Uso*: Simplifica a limpeza de nomes de colunas, checagem de duplicatas e criação de tabelas de frequência.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(janitor)) install.packages(\"janitor\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: janitor\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'janitor' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'janitor'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n:::\n\n```{.r .cell-code}\nlibrary(janitor)\n\nsurvey_b |> \n  tabyl(state, species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n state Fgra Fspp\n    PR   92   31\n    RS  133    9\n```\n:::\n\n```{.r .cell-code}\nsurvey_b |> \n  tabyl(year, species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n year Fgra Fspp\n 2009  225   40\n```\n:::\n:::\n\n\nCriar gráfico a partir de tabela\n\n::: callout-note\n##### Pacote *ggplot2*\n\n*Descrição*: Cria gráficos elegantes baseados na gramática dos gráficos.\\\n*Uso*: Visualizações de dados personalizadas com camadas.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(ggplot2)) install.packages(\"ggplot2\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: ggplot2\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nsurvey_b |> \n  group_by(year, species) |> \n  count() |> \n  ggplot(aes(species, n, fill = species)) +\n  geom_col() +\n  facet_wrap(~year)\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsurvey_b |> \n  group_by(year, species) |> \n  count() |> \n  ggplot(aes(year, n, fill = species)) +\n  geom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n:::\n\n\nOs gráficos podem ser modificados manualmente pelo *ggplot2*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_b |> \n  group_by(year, species) |> \n  count() |> \n  ggplot(aes(year, n, fill = species)) +\n  geom_col() +\n  scale_fill_manual(values = c(\"red\", \"blue\"))\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\n### scale_fill pode servir para mudanças manuais ou com base em paletas do R\n### fill = preenchimento\n### color = borda ou preenchimento\n```\n:::\n\n\n**O pacote ggplot2 será descrito de forma mais detalhada em capítulos posteriores**\n\nTransformar dados da planilha para formato largo (mais prático para realziar as análises)\n\n::: callout-note\n##### Pacote *tidyr*\n\nDescrição: Ferramentas para organização e estruturação de dados. Uso: Transforma dados entre formatos \"wide\" (amplo) e \"long\" (longo), trata valores ausentes e aninhados.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(tidyr)) install.packages(\"tidyr\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: tidyr\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'tidyr' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\n\nmg<- read_excel(\"dados-diversos.xlsx\",\n                       sheet = \"magnesio\")\n\nmg2 <- mg |>  \n  pivot_wider(names_from = trat, values_from = comp) |> \n    select(-rep)\n\nglimpse(mg2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 10\nColumns: 2\n$ Mg2     <dbl> 9.0, 12.5, 10.0, 8.0, 13.2, 11.0, 10.8, 9.5, 10.8, 10.4\n$ control <dbl> 13.72, 15.91, 15.70, 14.20, 15.90, 16.54, 18.00, 14.40, 16.41,…\n```\n:::\n\n```{.r .cell-code}\nmg2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n     Mg2 control\n   <dbl>   <dbl>\n 1   9      13.7\n 2  12.5    15.9\n 3  10      15.7\n 4   8      14.2\n 5  13.2    15.9\n 6  11      16.5\n 7  10.8    18  \n 8   9.5    14.4\n 9  10.8    16.4\n10  10.4    16  \n```\n:::\n:::\n",
    "supporting": [
      "intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}