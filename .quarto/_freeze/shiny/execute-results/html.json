{
  "hash": "75ffeec0ca8b19070c810bb2d565a909",
  "result": {
    "markdown": "# Aplicativos em Shiny\n\nO *Shiny* é um pacote do R que permite criar aplicativos web interativos diretamente do R. Com ele, é possível transformar análises estáticas em painéis dinâmicos, onde usuários podem ajustar parâmetros e visualizar resultados em tempo real.\n\n## Componentes Básicos\n\nUm app Shiny tem duas partes principais:\n\n### 1- UI (User Interface)\n\nDefine a estrutura visual do app (layout, inputs e outputs). Pode ser criada com:\\\n- *Funções básicas* (fluidPage(), sidebarLayout()).\\\n- *Componentes interativos*:\\\n- sliderInput(): Barra deslizante para selecionar valores.\\\n- selectInput(): Menu suspenso.\\\n- numericInput(): Campo para números.\\\n- actionButton(): Botão de ação.\n\n### 2- Server\n\nContém a lógica do R que processa os inputs e gera outputs (gráficos, tabelas, textos).\\\n- *Inputs*: Valores definidos pelo usuário na UI. - *Outputs*: Resultados renderizados.\n\n------------------------------------------------------------------------\n\n## Estrutura Básica\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(shiny)) install.packages(\"shiny\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCarregando pacotes exigidos: shiny\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'shiny' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(shiny)\n\n# UI\nui <- fluidPage(\n  titlePanel(\"App Shiny\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"bins\", \"Número de bins:\", min = 5, max = 50, value = 30)\n    ),\n    mainPanel(\n      plotOutput(\"histograma\")\n    )\n  )\n)\n\n# Server\nserver <- function(input, output) {\n  output$histograma <- renderPlot({\n    hist(rnorm(1000), breaks = input$bins, col = \"skyblue\")\n  })\n}\n\n# Rodar o app\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n\n## Exemplo\n\nO script a seguir, foi utilizado como teste para a aula de produção de aplicativos em shiny, na disciplina FIP606.\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(gsheet)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'gsheet' was built under R version 4.3.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(scales)\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'plotly' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'plotly'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n:::\n\n```{.r .cell-code}\n# --- Carregamento Direto dos Dados ---\nurl_gsheet <- \"https://docs.google.com/spreadsheets/d/1lX3qjWBZEVRQgBTAfj1tQ_ZGNj5a75D1VTKXwXDdTO8/edit\"\nurl_export <- gsub(\"/edit$\", \"/export?format=csv\", url_gsheet)\n\ndados_brutos <- tryCatch({\n  df <- gsheet2tbl(url_export)\n  colunas_necessarias <- c(\"consumo_total\", \"temperatura\", \"dia\", \"tratamento\")\n  if(!all(colunas_necessarias %in% names(df))) {\n    stop(\"O dataset não contém todas as colunas necessárias: consumo_total, temperatura, dia e tratamento\")\n  }\n  \n  df %>%\n    mutate(\n      consumo_total = as.numeric(consumo_total),\n      temperatura = as.numeric(temperatura),\n      dia = as.numeric(dia),\n      tratamento = as.factor(tratamento)\n    )\n}, error = function(e) {\n  stop(paste(\"Erro ao carregar os dados:\", e$message))\n})\n\n# Obter os tratamentos únicos\ntratamentos_unicos <- levels(dados_brutos$tratamento)\ntratamentos_unicos <- sort(tratamentos_unicos) # Ordena para consistência\n\nif (length(tratamentos_unicos) == 0) {\n  stop(\"Nenhum tratamento encontrado nos dados. Verifique a coluna 'tratamento'.\")\n}\n\n# UI\nui <- fluidPage(\n  titlePanel(\"Gráficos 3D Interativos: Consumo foliar de **Atta sexdens** Função de Temperatura e Dia por Tratamento\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"num_bins\", \"Número de Intervalos (afeta a suavidade da superfície):\",\n                  min = 5, max = 30, value = 15),\n      selectInput(\"paleta\", \"Escala de Cores:\",\n                  choices = c(\"Viridis\", \"Magma\", \"Inferno\", \"Plasma\", \"Spectral\"),\n                  selected = \"Viridis\")\n    ),\n    mainPanel(\n      uiOutput(\"tratamentoTabs\")\n    )\n  )\n)\n\n# Server\nserver <- function(input, output, session) {\n  \n  # Função auxiliar para gerar o gráfico 3D para um tratamento específico\n  generate_3d_plot <- function(df, tratamento_selecionado, num_bins, paleta_escolhida) {\n    print(paste(\"Gerando gráfico 3D para o tratamento:\", tratamento_selecionado))\n    df_filtrado <- df %>% filter(tratamento == tratamento_selecionado)\n    \n    if (nrow(df_filtrado) == 0 ||\n        length(unique(df_filtrado$temperatura)) < 2 ||\n        length(unique(df_filtrado$dia)) < 2) {\n      print(paste(\"AVISO: Dados insuficientes para o tratamento:\", tratamento_selecionado))\n      return(plotly_empty() %>%\n               layout(title = paste(\"Dados insuficientes para Tratamento:\", tratamento_selecionado),\n                      scene = list(xaxis = list(title = \"Temperatura (°C)\"),\n                                   yaxis = list(title = \"Dia\"),\n                                   zaxis = list(title = \"Consumo Médio\"))))\n    }\n    \n    df_plot_3d <- df_filtrado %>%\n      mutate(\n        temp_bin = cut(temperatura, breaks = num_bins, include.lowest = TRUE, ordered_result = TRUE),\n        dia_bin = cut(dia, breaks = num_bins, include.lowest = TRUE, ordered_result = TRUE)\n      ) %>%\n      group_by(temp_bin, dia_bin) %>%\n      summarise(\n        consumo_medio = mean(consumo_total, na.rm = TRUE),\n        .groups = \"drop\"\n      ) %>%\n      mutate(\n        temp_num = as.numeric(sapply(strsplit(gsub(\"\\\\(|\\\\]\", \"\", temp_bin), \",\"), function(x) mean(as.numeric(x)))),\n        dia_num = as.numeric(sapply(strsplit(gsub(\"\\\\(|\\\\]\", \"\", dia_bin), \",\"), function(x) mean(as.numeric(x))))\n      ) %>%\n      filter(!is.na(temp_num) & !is.na(dia_num) & !is.na(consumo_medio))\n    \n    if (nrow(df_plot_3d) == 0) {\n      print(paste(\"AVISO: df_plot_3d vazio após agrupamento para o tratamento:\", tratamento_selecionado))\n      return(plotly_empty() %>%\n               layout(title = paste(\"Sem dados para plotar para Tratamento:\", tratamento_selecionado),\n                      scene = list(xaxis = list(title = \"Temperatura (°C)\"),\n                                   yaxis = list(title = \"Dia\"),\n                                   zaxis = list(title = \"Consumo Médio\"))))\n    }\n    \n    color_scale <- switch(paleta_escolhida,\n                          \"Viridis\" = \"Viridis\",\n                          \"Magma\" = \"Magma\",\n                          \"Inferno\" = \"Inferno\",\n                          \"Plasma\" = \"Plasma\",\n                          \"Spectral\" = \"Spectral\")\n    \n    p <- plot_ly(df_plot_3d, x = ~temp_num, y = ~dia_num, z = ~consumo_medio,\n                 type = \"scatter3d\", mode = \"markers\",\n                 marker = list(size = 8, color = ~consumo_medio, colorscale = color_scale,\n                               colorbar = list(title = \"Consumo Médio\"), showscale = TRUE),\n                 text = ~paste(\"Temp: \", round(temp_num, 2), \"°C<br>\",\n                               \"Dia: \", round(dia_num, 2), \"<br>\",\n                               \"Consumo Médio: \", round(consumo_medio, 2)),\n                 hoverinfo = \"text\") %>%\n      layout(scene = list(xaxis = list(title = \"Temperatura (°C)\"),\n                          yaxis = list(title = \"Dia\"),\n                          zaxis = list(title = \"Consumo Médio\"),\n                          # --- MUDANÇA AQUI: Define o aspectmode para \"cube\" ---\n                          aspectmode = \"cube\" # Garante que os eixos tenham a mesma proporção\n      ),\n      title = paste(\"Tratamento:\", tratamento_selecionado))\n    \n    # Habilitar a barra de modos para zoom e pan (já estava configurado para isso)\n    # Comentar ou remover a linha abaixo se quiser todos os botões da barra:\n    # p <- p %>% config(modeBarButtonsToRemove = c('zoomIn3d', 'zoomOut3d', 'pan3d', 'orbitRotation', 'tableRotation', 'resetCameraLastSave3d', 'hoverClosest3d', 'hoverCompare3d', 'sendDataToCloud', 'toggleHover', 'toImage', 'autoscale'), displaylogo = FALSE)\n    \n    return(p)\n  }\n  \n  output$tratamentoTabs <- renderUI({\n    myTabs <- lapply(tratamentos_unicos, function(tratamento) {\n      plot_id <- paste0(\"plot3D_\", gsub(\"[^[:alnum:]]\", \"\", tratamento))\n      \n      tabPanel(\n        title = paste(\"Tratamento:\", tratamento),\n        plotlyOutput(plot_id, height = \"500px\")\n      )\n    })\n    \n    do.call(tabsetPanel, myTabs)\n  })\n  \n  observe({\n    lapply(tratamentos_unicos, function(tratamento) {\n      plot_id <- paste0(\"plot3D_\", gsub(\"[^[:alnum:]]\", \"\", tratamento))\n      \n      output[[plot_id]] <- renderPlotly({\n        generate_3d_plot(dados_brutos, tratamento, input$num_bins, input$paleta)\n      })\n    })\n  })\n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n\nO app shiny gerado por esse script pode ser visualizado no seguinte link: https://dclira.shinyapps.io/app_test/\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}