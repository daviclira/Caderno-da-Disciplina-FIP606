{"title":"Aplicativos em Shiny","markdown":{"headingText":"Aplicativos em Shiny","containsRefs":false,"markdown":"\nO *Shiny* é um pacote do R que permite criar aplicativos web interativos diretamente do R. Com ele, é possível transformar análises estáticas em painéis dinâmicos, onde usuários podem ajustar parâmetros e visualizar resultados em tempo real.\n\n## Componentes Básicos\n\nUm app Shiny tem duas partes principais:\n\n### 1- UI (User Interface)\n\nDefine a estrutura visual do app (layout, inputs e outputs). Pode ser criada com:\\\n- *Funções básicas* (fluidPage(), sidebarLayout()).\\\n- *Componentes interativos*:\\\n- sliderInput(): Barra deslizante para selecionar valores.\\\n- selectInput(): Menu suspenso.\\\n- numericInput(): Campo para números.\\\n- actionButton(): Botão de ação.\n\n### 2- Server\n\nContém a lógica do R que processa os inputs e gera outputs (gráficos, tabelas, textos).\\\n- *Inputs*: Valores definidos pelo usuário na UI. - *Outputs*: Resultados renderizados.\n\n------------------------------------------------------------------------\n\n## Estrutura Básica\n\n```{r}\nif(!require(shiny)) install.packages(\"shiny\")\nlibrary(shiny)\n\n# UI\nui <- fluidPage(\n  titlePanel(\"App Shiny\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"bins\", \"Número de bins:\", min = 5, max = 50, value = 30)\n    ),\n    mainPanel(\n      plotOutput(\"histograma\")\n    )\n  )\n)\n\n# Server\nserver <- function(input, output) {\n  output$histograma <- renderPlot({\n    hist(rnorm(1000), breaks = input$bins, col = \"skyblue\")\n  })\n}\n\n# Rodar o app\nshinyApp(ui = ui, server = server)\n\n\n```\n\n## Exemplo\n\nO script a seguir, foi utilizado como teste para a aula de produção de aplicativos em shiny, na disciplina FIP606.\\\n\n```{r}\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(gsheet)\nlibrary(dplyr)\nlibrary(scales)\nlibrary(plotly)\n\n# --- Carregamento Direto dos Dados ---\nurl_gsheet <- \"https://docs.google.com/spreadsheets/d/1lX3qjWBZEVRQgBTAfj1tQ_ZGNj5a75D1VTKXwXDdTO8/edit\"\nurl_export <- gsub(\"/edit$\", \"/export?format=csv\", url_gsheet)\n\ndados_brutos <- tryCatch({\n  df <- gsheet2tbl(url_export)\n  colunas_necessarias <- c(\"consumo_total\", \"temperatura\", \"dia\", \"tratamento\")\n  if(!all(colunas_necessarias %in% names(df))) {\n    stop(\"O dataset não contém todas as colunas necessárias: consumo_total, temperatura, dia e tratamento\")\n  }\n  \n  df %>%\n    mutate(\n      consumo_total = as.numeric(consumo_total),\n      temperatura = as.numeric(temperatura),\n      dia = as.numeric(dia),\n      tratamento = as.factor(tratamento)\n    )\n}, error = function(e) {\n  stop(paste(\"Erro ao carregar os dados:\", e$message))\n})\n\n# Obter os tratamentos únicos\ntratamentos_unicos <- levels(dados_brutos$tratamento)\ntratamentos_unicos <- sort(tratamentos_unicos) # Ordena para consistência\n\nif (length(tratamentos_unicos) == 0) {\n  stop(\"Nenhum tratamento encontrado nos dados. Verifique a coluna 'tratamento'.\")\n}\n\n# UI\nui <- fluidPage(\n  titlePanel(\"Gráficos 3D Interativos: Consumo foliar de **Atta sexdens** Função de Temperatura e Dia por Tratamento\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"num_bins\", \"Número de Intervalos (afeta a suavidade da superfície):\",\n                  min = 5, max = 30, value = 15),\n      selectInput(\"paleta\", \"Escala de Cores:\",\n                  choices = c(\"Viridis\", \"Magma\", \"Inferno\", \"Plasma\", \"Spectral\"),\n                  selected = \"Viridis\")\n    ),\n    mainPanel(\n      uiOutput(\"tratamentoTabs\")\n    )\n  )\n)\n\n# Server\nserver <- function(input, output, session) {\n  \n  # Função auxiliar para gerar o gráfico 3D para um tratamento específico\n  generate_3d_plot <- function(df, tratamento_selecionado, num_bins, paleta_escolhida) {\n    print(paste(\"Gerando gráfico 3D para o tratamento:\", tratamento_selecionado))\n    df_filtrado <- df %>% filter(tratamento == tratamento_selecionado)\n    \n    if (nrow(df_filtrado) == 0 ||\n        length(unique(df_filtrado$temperatura)) < 2 ||\n        length(unique(df_filtrado$dia)) < 2) {\n      print(paste(\"AVISO: Dados insuficientes para o tratamento:\", tratamento_selecionado))\n      return(plotly_empty() %>%\n               layout(title = paste(\"Dados insuficientes para Tratamento:\", tratamento_selecionado),\n                      scene = list(xaxis = list(title = \"Temperatura (°C)\"),\n                                   yaxis = list(title = \"Dia\"),\n                                   zaxis = list(title = \"Consumo Médio\"))))\n    }\n    \n    df_plot_3d <- df_filtrado %>%\n      mutate(\n        temp_bin = cut(temperatura, breaks = num_bins, include.lowest = TRUE, ordered_result = TRUE),\n        dia_bin = cut(dia, breaks = num_bins, include.lowest = TRUE, ordered_result = TRUE)\n      ) %>%\n      group_by(temp_bin, dia_bin) %>%\n      summarise(\n        consumo_medio = mean(consumo_total, na.rm = TRUE),\n        .groups = \"drop\"\n      ) %>%\n      mutate(\n        temp_num = as.numeric(sapply(strsplit(gsub(\"\\\\(|\\\\]\", \"\", temp_bin), \",\"), function(x) mean(as.numeric(x)))),\n        dia_num = as.numeric(sapply(strsplit(gsub(\"\\\\(|\\\\]\", \"\", dia_bin), \",\"), function(x) mean(as.numeric(x))))\n      ) %>%\n      filter(!is.na(temp_num) & !is.na(dia_num) & !is.na(consumo_medio))\n    \n    if (nrow(df_plot_3d) == 0) {\n      print(paste(\"AVISO: df_plot_3d vazio após agrupamento para o tratamento:\", tratamento_selecionado))\n      return(plotly_empty() %>%\n               layout(title = paste(\"Sem dados para plotar para Tratamento:\", tratamento_selecionado),\n                      scene = list(xaxis = list(title = \"Temperatura (°C)\"),\n                                   yaxis = list(title = \"Dia\"),\n                                   zaxis = list(title = \"Consumo Médio\"))))\n    }\n    \n    color_scale <- switch(paleta_escolhida,\n                          \"Viridis\" = \"Viridis\",\n                          \"Magma\" = \"Magma\",\n                          \"Inferno\" = \"Inferno\",\n                          \"Plasma\" = \"Plasma\",\n                          \"Spectral\" = \"Spectral\")\n    \n    p <- plot_ly(df_plot_3d, x = ~temp_num, y = ~dia_num, z = ~consumo_medio,\n                 type = \"scatter3d\", mode = \"markers\",\n                 marker = list(size = 8, color = ~consumo_medio, colorscale = color_scale,\n                               colorbar = list(title = \"Consumo Médio\"), showscale = TRUE),\n                 text = ~paste(\"Temp: \", round(temp_num, 2), \"°C<br>\",\n                               \"Dia: \", round(dia_num, 2), \"<br>\",\n                               \"Consumo Médio: \", round(consumo_medio, 2)),\n                 hoverinfo = \"text\") %>%\n      layout(scene = list(xaxis = list(title = \"Temperatura (°C)\"),\n                          yaxis = list(title = \"Dia\"),\n                          zaxis = list(title = \"Consumo Médio\"),\n                          # --- MUDANÇA AQUI: Define o aspectmode para \"cube\" ---\n                          aspectmode = \"cube\" # Garante que os eixos tenham a mesma proporção\n      ),\n      title = paste(\"Tratamento:\", tratamento_selecionado))\n    \n    # Habilitar a barra de modos para zoom e pan (já estava configurado para isso)\n    # Comentar ou remover a linha abaixo se quiser todos os botões da barra:\n    # p <- p %>% config(modeBarButtonsToRemove = c('zoomIn3d', 'zoomOut3d', 'pan3d', 'orbitRotation', 'tableRotation', 'resetCameraLastSave3d', 'hoverClosest3d', 'hoverCompare3d', 'sendDataToCloud', 'toggleHover', 'toImage', 'autoscale'), displaylogo = FALSE)\n    \n    return(p)\n  }\n  \n  output$tratamentoTabs <- renderUI({\n    myTabs <- lapply(tratamentos_unicos, function(tratamento) {\n      plot_id <- paste0(\"plot3D_\", gsub(\"[^[:alnum:]]\", \"\", tratamento))\n      \n      tabPanel(\n        title = paste(\"Tratamento:\", tratamento),\n        plotlyOutput(plot_id, height = \"500px\")\n      )\n    })\n    \n    do.call(tabsetPanel, myTabs)\n  })\n  \n  observe({\n    lapply(tratamentos_unicos, function(tratamento) {\n      plot_id <- paste0(\"plot3D_\", gsub(\"[^[:alnum:]]\", \"\", tratamento))\n      \n      output[[plot_id]] <- renderPlotly({\n        generate_3d_plot(dados_brutos, tratamento, input$num_bins, input$paleta)\n      })\n    })\n  })\n}\n\nshinyApp(ui, server)\n```\n\nO app shiny gerado por esse script pode ser visualizado no seguinte link: https://dclira.shinyapps.io/app_test/\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"shiny.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"visual","theme":"lux","highlight":"pygments","theme-dark":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}